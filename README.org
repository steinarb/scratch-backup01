* Forms based nginx login and pluggable shiro auth in karaf

This project contains a set of [[https://karaf.apache.org/manual/latest/#_feature_and_resolver][apache karaf features]] that fills two purposes
 1. Providing a [[Forms based login for nginx][forms based login mechanism for nginx]] (Note: the webapp provides only authentication. No authorization of individual URLs. All authenticated users get in)
 2. Providing a "poor man's single sign-on" for web applications running in the same apache karaf instance

** Status of the project

[[https://travis-ci.org/steinarb/authservice][file:https://travis-ci.org/steinarb/authservice.svg?branch=master]] [[https://coveralls.io/r/steinarb/authservice][file:https://coveralls.io/repos/steinarb/authservice/badge.svg]] [[https://sonarcloud.io/dashboard/index/no.priv.bang.sonar.osgi.service%3Aosgi.service][file:https://sonarcloud.io/api/project_badges/measure?project=no.priv.bang.authservice%3Aauthservice&metric=alert_status#.svg]] [[https://maven-badges.herokuapp.com/maven-central/no.priv.bang.authservice/authservice][file:https://maven-badges.herokuapp.com/maven-central/no.priv.bang.authservice/authservice/badge.svg]] [[https://www.javadoc.io/doc/no.priv.bang.authservice/authservice][file:https://www.javadoc.io/badge/no.priv.bang.authservice/authservice.svg]]

*** SonarCloud

[[https://sonarcloud.io/dashboard/index/no.priv.bang.authservice%3Aauthservice][file:https://sonarcloud.io/api/project_badges/measure?project=no.priv.bang.authservice%3Aauthservice&metric=ncloc#.svg]] [[https://sonarcloud.io/dashboard/index/no.priv.bang.authservice%3Aauthservice][file:https://sonarcloud.io/api/project_badges/measure?project=no.priv.bang.authservice%3Aauthservice&metric=bugs#.svg]] [[https://sonarcloud.io/dashboard/index/no.priv.bang.authservice%3Aauthservice][file:https://sonarcloud.io/api/project_badges/measure?project=no.priv.bang.authservice%3Aauthservice&metric=vulnerabilities#.svg]] [[https://sonarcloud.io/dashboard/index/no.priv.bang.authservice%3Aauthservice][file:https://sonarcloud.io/api/project_badges/measure?project=no.priv.bang.authservice%3Aauthservice&metric=code_smells#.svg]] [[https://sonarcloud.io/dashboard/index/no.priv.bang.authservice%3Aauthservice][file:https://sonarcloud.io/api/project_badges/measure?project=no.priv.bang.authservice%3Aauthservice&metric=coverage#.svg]]

** Installing on karaf
/Note/: The instructions here don't describe a production enviroment, but they describe setting up something that will let the service be startet.

The webapp needs PostgreSQL running, with a database named "ukelonn" containing the table users, and a no-password authentication scheme.

Instructions:
 1. In bash, clone and build the authservice app:
    #+BEGIN_EXAMPLE
      mkdir -p ~/git/
      cd ~/git/
      git clone https://github.com/steinarb/authservice.git
      cd ~/git/authservice/
      mvn clean install
    #+END_EXAMPLE
 2. [[https://karaf.apache.org/manual/latest/quick-start.html][Follow the quick start guide to downloading, unpacking and starting apache karaf]]
 3. In the karaf shell, install the authservice feature repository
    #+BEGIN_EXAMPLE
      feature:repo-add mvn:no.priv.bang.authservice/authservice/LATEST/xml/features
    #+END_EXAMPLE
 4. In the karaf shell, install the feature that installs the authorization service that is used by nginx (this feature installs a set of test users, roles and features)
    #+BEGIN_EXAMPLE
      feature:install authservice-with-derby-dbrealm-and-session
    #+END_EXAMPLE
 5. Open a browser on the URL http://localhost:8181/authservice and do a login with a valid username/password combination (e.g. "admin/admin")
 6. Open a browser on the URL http://localhost:8181/authservice/check and verify that it doesn't return a 401 HTTP code
 7. Optionally install the user administration UI (not needed for using this service with nginx, but needed for administrating the access)
    #+BEGIN_EXAMPLE
      feature:install user-admin-with-derby
    #+END_EXAMPLE
 8. Open a browser on the URL http://localhost:8181/authservice/useradmin and test adding/modifying users, roles and permissions

** Forms based login for nginx

The webapp installed by the above installation instructions offers two URLs for use by the [[http://nginx.org/en/docs/http/ngx_http_auth_request_module.html][NGINX auth_request module]]:
 - /auth which will just check the login state of Apache Shiro, returning the status code 401 for failure and 200 for success
 - /login which contains a login form and will authenticate against Apache Shiro

The webapp is implemented as two servlets exposed as OSGi services, that will be picked up by the [[http://ops4j.github.io/pax/web/4.x/index.html#_whiteboard_extender][pax web whiteboard extender]].

*** Installing and configuring nginx

Instructions:
 1. Install nginx with the auth module.  On debian this is done with the command
    #+BEGIN_EXAMPLE
      apt-get update
      apt-get install nginx-extras
    #+END_EXAMPLE
 2. Add the following to the /etc/nginx/sites-available/default (adapt this to the actual server/site in use):
    #+BEGIN_SRC conf
      server {
              listen 80 default_server;
              listen [::]:80 default_server;

              root /var/www/html;

              # Add index.php to the list if you are using PHP
              index index.html index.htm index.nginx-debian.html;

              server_name _;

              location /authservice {
                      auth_request off; # Necessary for REST API POST to work, shiro will handle authorization here
                      proxy_pass http://localhost:8181/authservice;
                      proxy_cookie_path ~^/authservice.*$ /;
                      proxy_set_header Host $host;
              }

              location / {
                      # First attempt to serve request as file, then
                      # as directory, then fall back to displaying a 404.
                      try_files $uri $uri/ =404;
              }

              # Auth configuration
              auth_request /authservice/check;
              error_page 401 = @error401;

              # If the user is not logged in, redirect to authservice login URL, with redirect information
              location @error401 {
                      add_header X-Original-URI "$scheme://$http_host$request_uri";
                      add_header Set-Cookie "NSREDIRECT=$scheme://$http_host$request_uri";
                      return 302 /authservice/login
              }
      }
    #+END_SRC
** Integrating with other webapps in karaf

There are several ways for a webapp to interact with authservice:
 1. Install authservice separately and add OSGi service injections for shiro Realm and Session (all user administration done in the authservice webapplication)
 2. Add the features for the liquibase database setup and the shiro Realm and Session and provide the necessary tables from a different web application's database
 3. Add the features for the authservice UserManagementService implementation, as well as the features for Realm and Session and and implement a user management GUI and webservice on top of the UserManagementService

...or various permutations of the above.  With [[https://github.com/steinarb/ukelonn][ukelonn]] I plan to add the authservice tables to the ukelonn database, and then let the ukelonn database provide the database for authservice itself.  I have made a first step in the direction of authservice integration by basing ukelonn's user management on the UserManagementService OSGi service, so that it later can be replaced by the authservice implementation of the service.

** License

This software is licensed under Apache Public License v 2.0.

See the LICENSE file for the full details.
